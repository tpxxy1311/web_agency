# requirement_analysis_task:
#   description: >
#     Analyze the user's input and extract structured functional and design requirements for the web page.
#     Ensure that the extracted information is well-structured, clear, and useful for UX designers and developers.
#     Pay special attention to accessibility considerations to ensure usability for all users and platform-specific needs.
#     Provided user inputs:
#     - Feature description: {feature_description}
#     - Functional requirements: {functional_requirements}
#     - Visual/design preferences: {layout_requirements}
#     - Edge cases: {edge_cases}
#     - API Calls: {api_call}
#   expected_output: >
#     A structured document containing:
#     - Functional requirements (core functionalities, user actions, API Calls)
#     - Non-functional and design requirements (layout, visual preferences)
#     - Accessibility considerations (contrast, keyboard navigation, responsiveness)
#   agent: requirement_analyst

# define_components_task:
#   description: >
#     Based on the extracted requirements and the user's detailed inputs, list and categorize all UI elements required for the web page.
#     Clearly define user interactions such as clicks, hover effects, transitions, and error handling.
#     Provided user inputs:
#     - Feature description: {feature_description}
#     - Functional requirements: {functional_requirements}
#     - Visual/design preferences: {layout_requirements}
#     - Edge cases: {edge_cases}
#   expected_output: >
#     A structured document containing:
#     - Categorized UI elements (e.g., input fields, buttons, navigation bars, images)
#     - Defined user interactions (e.g., button clicks, hover effects, error handling behavior)
#   agent: requirement_analyst
#   context: [requirement_analysis_task]

# generate_wireframe_description_task:
#   description: >
#     Create a detailed textual description of the wireframe based on the structured UI requirements.
#     Define all UI components, their roles, and their placement within the overall layout of the page.
#     The description must be structured so detailed and good that it can be converted into HTML and CSS in the next step.
#     Specify layout techniques (e.g., Columns, Rows, Grids) and ensure clear spacing and alignment details.
#     If user preferences for layout exist, integrate them accordingly.
#     Provided visual preferences:
#     {layout_requirements}
#   expected_output: >
#     A detailed textual wireframe description including:
#     - Layout structure (Grid, Columns, Rows, etc.)
#     - All UI components with their roles (inputs, buttons, navigation, images)
#     - Positioning and alignment details
#     - Spacing, margins, paddings
#     - Clear interaction zones (hover, clickable elements)
#     - No specific colors, fonts, or styles beyond layout details
#   agent: wireframe_designer
#   context: [define_components_task]

# parse_wireframe_components_task:
#   description: >
#     Analyze the textual wireframe description of the UI layout and extract a structured list of UI components.
#     For each UI component, identify its type (e.g., header, input field, button, image) and determine its placement within a 1024x720 pixel canvas.
#     Define the bounding box for each component using four properties:
#     - x: horizontal position (0 to 1024)
#     - y: vertical position (0 to 720)
#     - width: width of the component (max 1024)
#     - height: height of the component (max 720)
#     Ensure logical placement, spacing, and sizing between elements.
#     The output should be minimalistic, suitable for wireframe generation without unnecessary style information.
#     Focus on usability and clear layout logic.
#   expected_output: >
#     A JSON string representing a dictionary with the following structure:
#       - "components": A JSON array containing a list of UI components, each defined by:
#         - "type": the type of the component (header, input, button, image, etc.)
#         - "x": top-left x-coordinate (integer, 0-1024)
#         - "y": top-left y-coordinate (integer, 0-720)
#         - "width": width of the component (integer, max 1024)
#         - "height": height of the component (integer, max 720)
#       - "size": A dictionary containing:
#         - "width": the overall width of the canvas (integer, 1024)
#         - "height": the overall height of the canvas (integer, 720)
#     Example:
#     {
#       "components": [
#         {"type": "header", "x": 50, "y": 20, "width": 400, "height": 80},
#         {"type": "input", "x": 100, "y": 150, "width": 300, "height": 40},
#         {"type": "button", "x": 200, "y": 250, "width": 100, "height": 40},
#         {"type"}: "image", "x": 100, "y": 100, "width": 300, "height": 500}
#       ],
#       "size": {"width": 1024, "height": 720}
#     }
#     The output must include clear, logical positioning and avoid any specific styles, colors, or fonts.
#   agent: wireframe_parser
#   context: [generate_wireframe_description_task]

# render_wireframe_task:
#   description: >
#     Using the structured list of UI components with their bounding boxes, render a visual wireframe image.
#     Each component should appear as a black outlined rectangle on a white background.
#     Optionally, label each component with its type (e.g., "header", "button").
#     Image size: 1024x720 pixels.
#   expected_output: >
#     A saved image file (PNG) showing all UI components as outlined boxes.
#     Elements are placed according to their x, y, width, and height properties.
#     No color, no additional styling.
#   agent: wireframe_visualizer
#   context: [parse_wireframe_components_task]

# wireframe_generation_task:
#   description: >
#     Convert the structured list of UI components with their bounding boxes into a non-functional low-fidelity HTML wireframe. 
#     Use semantic HTML elements to represent UI components and apply CSS-based positioning (e.g., Flexbox, Grid) 
#     to ensure proper layout structure. Focus on spacing, alignment, and hierarchy to create a well-organized wireframe 
#     that serves as a foundation for further design iterations. 
#     The wireframe should be clean (no further styling or colors), easy to refine and ready to handoff to the Frontend Developers.
#   expected_output: >
#     - A structured HTML file (wireframe.html) representing the wireframe layout saved in the wireframe folder.
#     - A CSS Style Tag inside the wireframe.html defining the basic layout, spacing, and alignment.
#     - Semantic HTML structure ensuring clarity, accessibility, and usability.
#     - A brief explanation of the applied layout choices and structure.
#   agent: wireframe_designer
#   context: [parse_wireframe_components_task]

# wireframe_file_write_task:
#   description: >
#     Write the HTML wireframe to a file
#   expected_output: >
#     A html wireframe with all elements identified in the from previous task in a file named wireframes/wireframe.html
#   agent: wireframe_file_writer
#   context: [wireframe_generation_task]

# wireframe_validation_task:
#   description: >
#     Validate the generated wireframe against the defined UI components and layout requirements, you can
#     alo take a look at the user inputs again, if needed. 
#     Ensure that:
#       - All required elements from `define_components_task` are present.
#       - The Layout structure from `define_components_task` is correct.
#       - There are no overlapping elements.
#       - Layout alignment follows the structured wireframe description.
#       - The wireframe is well-organized, responsive-ready, and accessible.
#     If any issues are found, provide specific feedback to the Wireframe Designer.
#     Provided user inputs:
#     - Functional requirements: {functional_requirements}
#     - Visual/design preferences: {layout_requirements}
#   expected_output: >
#     - A validation report, safed in wireframes/wireframe_validation.md, stating whether the wireframe is correct.
#     - A list of any missing elements or layout inconsistencies.
#     - Clear improvement suggestions (if needed) for the Wireframe Designer, so he can improve the wirefraame.
#   agent: wireframe_validator
#   context: [define_components_task, wireframe_generation_task]

# plan_component_structure_task:
#   description: >
#     Review the HTML wireframe and the requirement list and inspect the project folder structure 
#     of the existing Next.js project located at '../../fara.ai-frontend/src'. 
#     Plan how to split the page into reusable, maintainable seperat React components, which will be later implemented in seperate files
#     and identify which parts don't have to be a seperate component file and can be implemented directly on the page.
#     Use the new Next.js App Router conventions (page.jsx in a folder with the page name (e.g. app/(auth)/login/page.jsx)).
#     For each identified component:
#       - Define the component name and its responsibility.
#       - Define which States are needed and which functionality the components should have.
#       - Decide whether the component should be reusable or page-specific.
#       - Determine the appropriate subdirectory within the Next.js project where the component file should be created (e.g., components/).
#       - Determine the appropriate subdirectory within the Next.js project where the new page folder (name of the new page) and page file (page.jsx in this folder) should be created (/app/(main) or /app/(auth)).
#     Ensure alignment with best practices for Next.js and React.
#     Consider component hierarchy, reusability, and scalability.
#     Provide the output in for the frontend developer.
#   expected_output: >
#     - The identified new page folder and its suggested subfolder path in the Next.js project src/app directory 
#       (e.g. /app/(auth)/login/page.jsx or /app/(main)/explore/page.jsx
#     - A list of identified React components, including:
#       - Component name (e.g LoginForm, NewsCard etc.)
#       - Description of its purpose
#       - Description of its functionality and states
#       - Suggested directory/subfolder path in the Next.js project (e.g. fara.ai-frontend/src/components/LoginForm.jsx)
#     - Explanation of component hierarchy and reusability considerations.
#   agent: frontend_software_engineer
#   context: [wireframe_generation_task, requirement_analysis_task]

# generate_page_assets_task:
#   description: >
#     Determine if the current page design requires any additional image assets such as hero backgrounds, icons, or illustrations.
#     This task should ONLY execute if the user provided a specific visual prompt or request: {image_asset}
#     If `{image_asset}` is empty, "No", "None", or similar, skip this task and return:
#       - status: SKIPPED
#       - reason: "No image requested or needed."
#     If an image is requested, you must:
#       - Analyze the user input and determine what kind of image should be created.
#       - Refine the image prompt if necessary for a better output
#       - Decide where and how the image will be used in the page layout
#       - Generate a single DALL·E image using the refined prompt
#       - Suggest the filename and asset path (e.g. `public/assets/login-hero.png`)
#       - Describe how the image should be integrated (e.g. background-image in hero section)
#   expected_output: >
#     If no image is required:
#       - status: SKIPPED
#       - reason: explanation
#     If image generation is performed:
#       - status: GENERATED
#       - assets:
#           - name: Short descriptive name
#             original_user_prompt: The original prompt from the user
#             refined_prompt: Final DALL·E prompt used
#             path: <relative file path> (e.g. "../../fara.ai-frontend/public/assets/login-bg.png")
#             image_url: URL where to access and download the image
#             use_case: Where and how the image should be used
#             aspect_ratio: landscape | square | icon
#             dalle_generation_metadata:
#               resolution: e.g. 1200x600
#               variation_count: 1
#   agent: image_asset_designer

# save_image_asset_task:
#   description: >
#     Save the image generated in the pervious task to the correct location in the project folder.
#     You will receive an image asset definition that includes:
#       - The image URL (returned by DALL·E)
#       - The local file path where the image should be saved (e.g. "../../fara.ai-frontend/public/assets/peacock-bg.png")
#     Use the SaveImageFromUrlTool to download and store the image in the correct path.
#     Skip this task if no image was generated or the status is SKIPPED.
#   expected_output: >
#     - A list of saved image assets with:
#         - file path
#         - confirmation message
#     - If the task is skipped, explain why.
#   agent: frontend_file_writer
#   context: [generate_page_assets_task]

# implement_nextjs_components_task:
#   description: >
#     Based on the planned component structure, implement the React components and page layout.
#     Focus purely on writing clean, reusable, semantic, and functional React components.
#     Do not apply any visual styling — keep components unstyled for now (use semantic HTML and structure only).
#     You must:
#       - Implement each seperate component as a code snippet.
#       - If an image asset was generated (see context), include it appropriately in the layout:
#         - As an `<Image src="public/assets/..."/>` from next/image
#         - Make sure the Image Component is imported correct
#       - Include meaningful and reusable className attributes in all JSX elements to support future styling via SCSS modules.
#       - Assemble the components into a full new Next.js page file that uses those components.
#       - Follow exactly the file paths and structure defined in the plan.
#       - Output all code in a machine-readable format so the file writer can save it correctly.
#     Do NOT save the code — only return the full set of snippets with exact filenames and paths.
#     Use the new Next.js App Router structure (e.g., `/app/(main)/dashboard/page.jsx`).
#   expected_output: >
#     A JSON-like list of all code files to be written later, in this format:
#       - name: component or page name
#         path: <relative path from src> (e.g. "components/LoginForm.jsx", "app/(auth)/login/page.jsx")
#         type: component | page
#         content: |
#           // Full JSX code for the component or page
#         description: A short explanation of the file’s purpose
#     You MUST include:
#       - One `page.jsx` file placed in a proper route folder inside `app/(main)/` or `app/(auth)/`
#       - All JSX must already include relevant `className` attributes for each block, element, or wrapper, even though the actual styles are not applied yet.
#       - Class names should reflect semantic structure (e.g., 'login-form', 'form-input', 'submit-button') and be consistent across files.
#       - All relevant React components placed inside `/components/` or any other designated component subfolder
#     The file paths must be accurate so the `frontend_file_writer` can save them automatically.
#   agent: nextjs_frontend_developer
#   context: [plan_component_structure_task, save_image_asset_task]

# implement_api_calls_task:
#   description: >
#     If API calls are required (based on the user input: {api_call}),
#     enhance the previously implemented components with the necessary API integrations.
#     Your responsibilities:
#       - Identify which components need API calls.
#       - Implement the API logic directly inside those components, using the correct Next.js data-fetching methods (e.g., `async fetch`, `useEffect`, or server components if applicable).
#       - Add proper state handling for loading, errors, and success.
#       - Update the component JSX structure if necessary to reflect loading states or conditional rendering.
#       - Do not apply any visual styling — focus only on logic.
#     You must return the **entire updated component code** for each modified file in a structured format that can later be reviewed and saved.
#   expected_output: >
#     A list of modified files in the following format:
#       - name: component or page name
#         path: <relative path from src> (e.g. "components/LoginForm.jsx", "app/(auth)/login/page.jsx")
#         type: component | page
#         content: |
#           // Updated React component code with API logic
#         description: Description of the component’s purpose and what was changed
#         api_summary:
#           - endpoint: https://api.example.com/user
#             method: GET
#             state_handling: useEffect + useState
#             error_handling: try/catch + fallback UI
#             reason: Fetching user profile on component mount
#     If no API calls are required, return a message indicating the task was skipped.
#   agent: nextjs_frontend_developer
#   context: [implement_nextjs_components_task]

# validate_nextjs_code_task:
#   description: >
#     Conduct a thorough review of the implemented React components and Next.js page structures.
#     You are responsible for directly fixing any issues you find, without delegating.
#     You MUST:
#       - Check if the implemented components and structure fit to the plan, made by the Software Engineer
#       - Fix problems related to component modularity, reusability, and separation of concerns.
#       - Ensure semantic HTML, proper accessibility (e.g. ARIA roles, alt texts), and HTML best practices.
#       - All Elements have correct classNames for a later styling with SCSS ot tailwind by the UI Designer Agent.
#       - Correct any inconsistencies in naming conventions, imports, or file paths.
#       - Review and improve API call logic, error boundaries, and state handling.
#       - Eliminate duplicated props or unnecessary states.
#       - Ensure all imports are correct and build-in Next.js Elements like <Image> or <Link> are also imported correctly, if used.
#       - Ensure the structure matches the original architectural plan and project conventions.
#     After making changes, return:
#       - The improved code as structured files
#       - A detailed changelog per file
#       - A final review status indicating whether the code is fully APPROVED or still needs further changes
#   expected_output: >
#     Return the validated and corrected files in the following format:
#       files:
#         - name: component or page name
#           path: <relative path from src> (e.g. "components/LoginForm.jsx", "app/(auth)/login/page.jsx")
#           type: component | page
#           content: |
#             // Improved JSX code
#           description: Description of the file and its purpose
#           changes_made:
#             - Description of change 1
#             - Description of change 2
#             ...
#   agent: frontend_code_reviewer
#   context: [plan_component_structure_task, implement_api_calls_task, implement_nextjs_components_task]

# write_nextjs_code_task:
#   description: >
#     Write the validated and approved React components, Next.js pages, and any other provided files to the Next.js project located at '../../fara.ai-frontend/src'.
#     You MUST:
#       - Read the provided list of files, each containing:
#           - path: relative file path from src/
#           - content: the code to write
#       - Ensure the content is saved **exactly** as received.
#       - Match Next.js App Router conventions:
#           - Auth pages go in: ../../fara.ai-frontend/src/app/(auth)/<page-name>/page.jsx
#           - Main pages go in: ../../fara.ai-frontend/src/app/(main)/<page-name>/page.jsx
#           - Components go in: ../../fara.ai-frontend/src/components/<ComponentName>.jsx
#       - Automatically create folders if they do not exist.
#       - Do not overwrite existing files unless explicitly instructed.
#   expected_output: >
#     - A list of all written files with:
#         - file path
#         - status: WRITTEN | SKIPPED
#     - If skipped due to review status, explain the reason.
#     - All files must be saved in '../../fara.ai-frontend/src' using their relative paths.
#   agent: frontend_file_writer
#   context: [validate_nextjs_code_task]

# style_components_task:
#   description: >
#     Style the previously implemented React components using the design rules defined in the Styleguide (available in the global CSS File provided).
#     Consider also the users preferences on styling and layout if needed: {layout_requirements}
#     Focus on:
#       - Visual polish (colors, spacing, typography, hover animations)
#       - Consistent use of UI elements across components
#       - Styling can be done using SCSS modules (e.g. ProductCard.module.scss).
#       - Use the `className` values already defined in the JSX structure of the components — style them accordingly in SCSS.
#       - Do not rename classNames or modify the structure unless absolutely necessary — styling should match the structure.
#       - If a component lacks meaningful `className`s, recommend updates in a side note but continue styling what is available.
#     Do not modify logic or state behavior — only the appearance.
#     Ensure that each component imports the correct style and remains modular.
#   expected_output: >
#       Return the SCSS Styles documents for each component with applied styles in the following format:
#       files:
#         - name: styled component name
#           path: <relative path from src> (e.g. "styles/components/LoginForm.module.scss", "styles/components/ProductCard.module.scss")
#           type: component
#           content: |
#             // SCSS stylings
#           description: Description of the style file and its purpose
#           targets e.g.:
#           - class: login-form
#           - class: form-label
#           - class: form-input
#   agent: frontend_ui_designer
#   context: [validate_nextjs_code_task] 

# style_page_layout_task:
#   description: >
#     Style the previously implemented Next.js page layout using the design rules defined in the Styleguide (available in the global CSS File provided).
#     Consider also the user's preferences on styling and layout if provided: {layout_requirements}
#     Focus on:
#       - Page structure, spacing, section layout, typography, and visual hierarchy
#       - Visual consistency with the overall design system and reusable UI elements
#       - Styling must be done using SCSS modules (e.g. `home.module.scss`)
#       - Use the `className` values already defined in the page JSX structure — style them accordingly in SCSS.
#       - Do not rename classNames or modify the JSX structure unless absolutely necessary — styling should match the structure.
#       - If a page lacks meaningful `className`s, recommend updates in a side note but continue styling what is available.
#     You must:
#       - Compare the page layout visually to the provided wireframe and ensure all sections are properly aligned, spaced, and ordered.
#       - Fix any visual layout issues (e.g. padding, alignment, width, responsive behavior)
#     You must not:
#       - Modify any logic, props, or API calls
#       - Apply component-level styles (these are handled in a separate task)
#     Ensure that each page correctly imports its SCSS module and all styles remain scoped and modular.
#   expected_output: >
#     Return the SCSS Styles documents for each styled page layout in the following format:
#     files:
#       - name: styled page name
#         path: <relative path from src> (e.g. "styles/pages/dashboard.module.scss", "styles/pages/login.module.scss")
#         type: page
#         content: |
#           // SCSS stylings
#         description: Description of the style file and its purpose
#         targets e.g.:
#           - class: page-wrapper
#           - class: header-section
#           - class: content-grid
#   agent: frontend_ui_designer
#   context: [wireframe_generation_task, validate_nextjs_code_task, style_components_task]

# write_scss_styles_task:
#   description: >
#     Write the validated and generated SCSS module files for React components and page layouts into the correct folders inside the Next.js project at '../../fara.ai-frontend/src'.
#     You MUST:
#       - Read the provided list of style files, each containing:
#           - path: relative file path from src/styles/
#           - type: component | page
#           - content: the SCSS module content
#       - Save component styles under: styles/components/<ComponentName>.module.scss
#       - Save page layout styles under: styles/pages/<PageName>.module.scss
#       - Automatically create folders if they do not exist
#       - Ensure the file content is saved exactly as received
#       - Do NOT overwrite existing files unless explicitly instructed
#   expected_output: >
#     - A list of all written SCSS style files with:
#         - file path
#         - status: WRITTEN | SKIPPED
#     - If skipped due to missing input or previous errors, explain the reason
#     - All files must be saved in '../../fara.ai-frontend/src' using their relative paths
#   agent: frontend_file_writer
#   context: [style_components_task, style_page_layout_task]

# bind_scss_imports_task:
#   description: >
#     Add SCSS module import statements to the top of each JSX component or page file
#     that was styled in the previous steps.
#     You will receive:
#       - A list of JSX files with paths (e.g. "components/LoginForm.jsx", "app/(auth)/login/page.jsx")
#       - A list of corresponding SCSS module files (e.g. "styles/components/LoginForm.module.scss")
#     You MUST:
#       - Match each JSX file to its SCSS module using the component or page name
#       - Add the import statement at the top of the JSX file:
#           import styles from '@/styles/components/LoginForm.module.scss'
#       - Ensure the import path is correct and works from the file's location
#       - Skip any file that already includes the correct import
#       - Do NOT modify any logic, JSX structure, or state handling
#     This task is only concerned with adding missing SCSS imports — not with styling or saving.
#   expected_output: >
#     - A list of updated JSX files with:
#         - path
#         - updated content (including the import)
#         - import path used
#         - status: UPDATED | SKIPPED
#     - A report of any files that were skipped (with reason)
#   agent: frontend_file_writer
#   context: [write_nextjs_code_task, write_scss_styles_task]

screenshot_and_analyze_task:
  description: >
    Use the custom tool to start the Next.js development server in the specified project path.
    Once the server is live, open the homepage in a headless playwright browser, capture a screenshot,
    and return the screenshot path for further analysis.
    The project path is ../../fara.ai-frontend.
  expected_output: >
    A success message with the saved screenshot path or an error message if the operation failed.
  agent: screenshot_provider








